> ## Put comments here that give an overall description of what your
> ## functions do
> 
> ## Write a short comment describing this function
> 
> makeCacheMatrix <- function(x = matrix()) {
+ 
+ i <- NULL
+         set <- function(y) {
+                 x <<- y
+                 i <<- NULL
+         }
+         get <- function() x
+         setInv <- function(ierse) i <<- ierse
+         getInv <- function() i
+         list(set = set,
+              get = get,
+              setInv = setInv,
+              getInv = getInv)
+ }
> 
> 
> ## Write a short comment describing this function
> 
> cacheSolve <- function(x, ...) {
+         ## Return a matrix that is the ierse of 'x'
+ i <- x$getInv()
+         if (!is.null(i)) {
+                 message("getting cached data")
+                 return(i)
+         }
+         mat <- x$get()
+         i <- solve(mat, ...)
+         x$setInv(i)
+         i
+ }
> matr <- makeCacheMatrix(matrix(1:4, 2, 2))
> matr$get()
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> matr$getInverse()
Ошибка: попытка применить не-функцию
> matr$getInv()
NULL
> cacheSolve(matr)
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> cacheSolve(matr)
getting cached data
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> matr$getInv()
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> matr$set(matrix(c(2,1,3,1), 2, 2))
> matr$get()
     [,1] [,2]
[1,]    2    3
[2,]    1    1
> matr$getInv()
NULL
> cacheSolve(matr)
     [,1] [,2]
[1,]   -1    3
[2,]    1   -2
> cacheSolve(matr)
getting cached data
     [,1] [,2]
[1,]   -1    3
[2,]    1   -2
> matr$getInv()
     [,1] [,2]
[1,]   -1    3
[2,]    1   -2
> matr$set(matrix(c(2,1,3,1,3,4,2,1,2), 3, 3))
> matr$get()
     [,1] [,2] [,3]
[1,]    2    1    2
[2,]    1    3    1
[3,]    3    4    2
> matr$getInv()
NULL
> cacheSolve(matr)
     [,1] [,2] [,3]
[1,] -0.4 -1.2    1
[2,] -0.2  0.4    0
[3,]  1.0  1.0   -1
> cacheSolve(matr)
getting cached data
     [,1] [,2] [,3]
[1,] -0.4 -1.2    1
[2,] -0.2  0.4    0
[3,]  1.0  1.0   -1
> 